{"version":3,"file":"static/js/210.900a6d78.chunk.js","mappings":"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","sources":["components/charPage/CharPage.js","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { Helmet } from 'react-helmet';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// эти два импорта больше не нужны, т.к. они вшиты в setContent\r\n// import Spinner from '../spinner/Spinners';\r\n// import ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charPage.scss'\r\n\r\nconst CharPage = () => {\r\n\r\n    const {id} = useParams();\r\n    const [char, setChar] = useState([]);\r\n    const {loading, error, clearError, getCharacter, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [id])\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        getCharacter(id)\r\n            .then(data => setChar(data))\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    // const errorMessage = error ? <ErrorMessage/> : null; \r\n    // const spinner = loading ? <Spinner/> : null; \r\n    // const content = (!error && !loading && char) ? <View char={char}></View> : null;\r\n\r\n    return (\r\n        <>\r\n            {setContent(process, View, char)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharPage;\r\n\r\nconst View = ({data}) => {\r\n    const {thumbnail, description, name} = data;\r\n    return (\r\n        <div className=\"char-page\">\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`Page about ${name}`}\r\n                />\r\n                <title>{`${name} page`}</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={name} className=\"char-page__img\"/>\r\n            <div className=\"char-page__info\">\r\n                <h2 className=\"char-page__name\">{name}</h2>\r\n                <p className=\"char-page__descr\">{description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import imgError from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={imgError} alt={'Ошибка загрузки'}></img>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useCallback } from \"react\";\r\n\r\n// это будет хук, который объединит несколько методов, связанными с изменением статусов загрузки и ошибки во время направления запросов на серврер, т.к. они повторяются в разных элементах\r\n// кроме того, в этом хуке мы пропишем функцию по направлению запроса, которая будет выступать основой для похожей функции из MarvelService\r\nexport const useHttp = () => {\r\n    // эти два состояния больше не нужны, так как рендеринг компонентов, привязанных к ним, мы поставили в зависимость от значения состояния process\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting'); // это состояние нужно для внедрения конечного автомата, по умолчанию стоит состояние ожидания\r\n\r\n    // это будет мемоизированная функция по направлению запроса, в ней также укажем параметры по умолчанию\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        // больше не нужно благодаря состоянию process\r\n        // setLoading(true); // так как пошёл запрос на сервер, у загрузки статус меняется на true\r\n        setProcess('loading'); // процесс переходит в состояние загрузки\r\n        try { // направляем запрос\r\n            const response = await fetch(url, {method, body, headers}); // в эту переменную придёт ответ запроса\r\n            if (!response.ok) { // в случае ошибки будет выводиться сообщение об этом\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json(); // сюда помещается ответ от сервера, преобразованный в json\r\n            // больше не нужно благодаря состоянию process\r\n            // setLoading(false); // т.к. это ветка по успешному получению ответа от запроса, значит, в конце успеха статус загрузки прекращается\r\n            return data; // это не то же самое, что в MarvelService, потому что там возвращается трансформированные данные, а у нас изначальные от API\r\n        } catch(e) { // этот код на случай ошибки\r\n            // больше не нужны благодаря состоянию process\r\n            // setLoading(false); // загрузка завершилась неудачей, но завершилась, поэтому статус меняем на false\r\n            // setError(e.message); // вернётся текст ошибки\r\n            setProcess('error') // процесс переходит в состояние ошибки (что загрузка не сработала)\r\n            throw e; // выкидываем ошибку\r\n        }\r\n\r\n    }, [])\r\n\r\n    // эта функция будет очищать ошибку, если она была\r\n    const clearError = useCallback(() => {\r\n        // больше не нужно благодаря состоянию process\r\n        // setError(null);\r\n        setProcess('loading'); // процесс вновь переходит в состояние загрузки\r\n    }, []);\r\n\r\n    // убираем loading и error, они больше не нужны благодаря process\r\n    return {request, clearError, process, setProcess};\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n// это код новый, с переделкой под хуки и функциональный подход\r\nconst useMarvelService = () => {\r\n    // через деструктуризацию вытащим интересующие нас части useHttp\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n    // т.к. запрос на сайт имеет одинаковые части, можно сократить url, введя переменные\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=677f4f151277ce2120c892cebbe0e1ba';\r\n    const _baseOffset = 200; // эта переменная означает отступ в количестве персонажей, начиная с первого, в запросе на сервер\r\n\r\n    // создадим несколько методов, которые будут упрощать работу\r\n    // метод по получению данных о всех персонажах\r\n    const getAllCharacters = async (offset = _baseOffset) => { // предусматриваем переменную и значение по умолчанию, потому что эта переменная может меняться\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    // метод по получению данных о конкретном персонаже\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`); // получили данные от сервера\r\n        return _transformCharacter(res.data.results[0]); // возвращаем их уже в преобразованном виде\r\n    }\r\n    // метод по трансформации данных о персонажах, он будет полученные данные от сервера превращать в объект, кт мы используем в компонентах (там этот объект является объектом state)\r\n    const _transformCharacter = (char) => {\r\n        let description = char.description;\r\n        description = description ? `${description.slice(0, 200)}...` : `Описание данного персонажа отсутствует`;\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: description,\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.slice(0, 10),\r\n            title: char.title,\r\n        }\r\n    }\r\n\r\n    // метод по трансформации данных о комиксах, он будет полученные данные от сервера превращать в объект, кт мы используем в компонентах (там этот объект является объектом state)\r\n    const _transformComics = (comics) => {\r\n        let price = comics.prices[0].price;\r\n        price = price ? `${comics.prices[0].price}$` : `Комикс отсутствует в продаже`;\r\n\r\n        return {\r\n            id: comics.id,\r\n            description: comics.description || 'Описание комикса отсутствует',\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            title: comics.title.length > 50\r\n                ? `${comics.title.slice(0, 50)}...`\r\n                : comics.title,\r\n            price: price,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            pageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"Информация о количестве листов в комиксе отсутствует\",\r\n        }\r\n    }\r\n\r\n    // метод по получению списка комиксов\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n    // метод по получению конкретного комикса\r\n    const getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    // метод по получению данных о конкретном персонаже\r\n    const getChar = async () => {\r\n        const res = await request(`${_apiBase}characters?${_apiKey}`); // получили данные от сервера\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // этот хук будет возвращать состояния загрузки и ошибки, а также два метода по получению всех персонажей и только одного персонажа\r\n    // благодаря process удаляем loading и error\r\n    return {\r\n            // loading, \r\n            // error, \r\n            clearError, \r\n            process,\r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComics, \r\n            getChar\r\n        }\r\n}\r\n\r\n// этот код старый, до переделки его в хуки\r\n// мы не импортируем Components и не наследуем от него, потому что это отдельный класс, в котором не будет ничего от React\r\n// class MarvelService {\r\n//     // т.к. запрос на сайт имеет одинаковые части, можно сократить url, введя переменные\r\n//     _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n//     _apiKey = 'apikey=677f4f151277ce2120c892cebbe0e1ba';\r\n//     _baseOffset = 200; // эта переменная означает отступ в количестве персонажей, начиная с первого, в запросе на сервер\r\n    \r\n//     // создали функцию (метод), которая будет делать запрос\r\n//     getResource = async (url) => {\r\n//         let res = await fetch(url);\r\n\r\n//         if (!res.ok) { // в случае ошибки будет выводиться сообщение об этом\r\n//             throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//         }\r\n\r\n//         return await res.json(); // если всё хорошо, будут возвращаться данные в формате json\r\n//     };\r\n\r\n//     // создадим несколько методов, которые будут упрощать работу с классом\r\n//     // метод по получению данных о всех персонажах\r\n//     getAllCharacters = async (offset = this._baseOffset) => { // предусматриваем переменную и значение по умолчанию, потому что эта переменная может меняться\r\n//         const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n//         return res.data.results.map(this._transformCharacter);\r\n//     }\r\n//     // метод по получению данных о конкретном персонаже\r\n//     getCharacter = async (id) => {\r\n//         const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`); // получили данные от сервера\r\n//         return this._transformCharacter(res.data.results[0]); // возвращаем их уже в преобразованном виде\r\n//     }\r\n//     // метод по трансформации данных, он будет полученные данные от сервера превращать в объект, кт мы используем в компонентах (там этот объект является объектом state)\r\n//     _transformCharacter = (char) => {\r\n//         let description = char.description;\r\n//         description = description ? `${description.slice(0, 200)}...` : `Описание данного персонажа отсутствует`;\r\n\r\n//         return {\r\n//             id: char.id,\r\n//             name: char.name,\r\n//             description: description,\r\n//             thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n//             homepage: char.urls[0].url,\r\n//             wiki: char.urls[1].url,\r\n//             comics: char.comics.items.slice(0, 10)\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinners';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\n// поскольку подобный блок логики повторяется в нескольких компонентах, мы его выделили в отдельную функцию в отдельном файле\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>; // если у состояния процесса значение ожидания, значит, ещё не был отправлен запрос на сервер и пока на сайте у компонента стоит заглушка\r\n        case 'loading':\r\n            return <Spinner/>; // если у состояния процесса значение загрузки, значит, запрос отправлен на сервер, но нет никакого ответа, поэтому будет показываться компонент загрузки\r\n        case 'confirmed':\r\n            return <Component data={data}/>; // если у состояния процесса значение подтверждено, значит, от сервера пришли данные, а не ошибка, тогда загружается полученный контент\r\n        case 'error':\r\n            return <ErrorMessage/>; // если у состония процесса значение ошибки, значит, от сервера не пришли данные, а возникла ошибка, тогда показывается компонент с ошибкой\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["CharPage","id","useParams","char","setChar","useState","loading","error","clearError","getCharacter","process","setProcess","useMarvelService","useEffect","updateChar","then","data","_jsx","_Fragment","children","setContent","View","_ref","thumbnail","description","name","_jsxs","className","Helmet","content","concat","src","alt","ErrorMessage","style","display","width","height","objectFit","margin","imgError","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","slice","path","extension","homepage","urls","wiki","comics","items","title","_transformComics","_comics$textObjects$","price","prices","language","textObjects","pageCount","getAllCharacters","offset","results","map","res","getAllComics","getComics","getChar","Skeleton","Component","Spinner"],"sourceRoot":""}