{"version":3,"file":"static/js/716.31601e46.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import imgError from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={imgError} alt={'Ошибка загрузки'}></img>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { Helmet } from 'react-helmet';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// эти два импорта больше не нужны, т.к. они вшиты в setContent\r\n// import Spinner from '../spinner/Spinners';\r\n// import ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    // хук useParams позволяет получить объект со значением того уникального куска пути, который есть у страницы, в нашем случае это id комикса\r\n    const {id} = useParams();\r\n    const [comic, setComic ] = useState(null);\r\n    const {loading, error, getComics, clearError, process, setProcess} = useMarvelService();\r\n\r\n    // этот метод здесь нужен для того, чтобы, если пользователь вручную поменяет адрес на другой комикс, ему отрисовалась новая страница с этим комиксом\r\n    useEffect(() => {\r\n        updateComics();\r\n    }, [id]);\r\n\r\n    // этот метод будет направлять запрос серверу и возвращать данные или ошибку\r\n    const updateComics = () => {\r\n        clearError();\r\n        getComics(id)\r\n            .then(comic => setComic(comic))\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    // const errorMessage = error ? <ErrorMessage/> : null; \r\n    // const spinner = loading ? <Spinner/> : null; \r\n    // const content = (!error && !loading && comic) ? <View comic={comic}></View> : null;\r\n\r\n    return (\r\n        <>\r\n            {setContent(process, View, comic)}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {thumbnail, description, title, price, language, pageCount} = data;\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${title} comics book`}\r\n                />\r\n                <title>{title} comic page</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SingleComicPage;","import { useState, useCallback } from \"react\";\r\n\r\n// это будет хук, который объединит несколько методов, связанными с изменением статусов загрузки и ошибки во время направления запросов на серврер, т.к. они повторяются в разных элементах\r\n// кроме того, в этом хуке мы пропишем функцию по направлению запроса, которая будет выступать основой для похожей функции из MarvelService\r\nexport const useHttp = () => {\r\n    // эти два состояния больше не нужны, так как рендеринг компонентов, привязанных к ним, мы поставили в зависимость от значения состояния process\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting'); // это состояние нужно для внедрения конечного автомата, по умолчанию стоит состояние ожидания\r\n\r\n    // это будет мемоизированная функция по направлению запроса, в ней также укажем параметры по умолчанию\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        // больше не нужно благодаря состоянию process\r\n        // setLoading(true); // так как пошёл запрос на сервер, у загрузки статус меняется на true\r\n        setProcess('loading'); // процесс переходит в состояние загрузки\r\n        try { // направляем запрос\r\n            const response = await fetch(url, {method, body, headers}); // в эту переменную придёт ответ запроса\r\n            if (!response.ok) { // в случае ошибки будет выводиться сообщение об этом\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json(); // сюда помещается ответ от сервера, преобразованный в json\r\n            // больше не нужно благодаря состоянию process\r\n            // setLoading(false); // т.к. это ветка по успешному получению ответа от запроса, значит, в конце успеха статус загрузки прекращается\r\n            return data; // это не то же самое, что в MarvelService, потому что там возвращается трансформированные данные, а у нас изначальные от API\r\n        } catch(e) { // этот код на случай ошибки\r\n            // больше не нужны благодаря состоянию process\r\n            // setLoading(false); // загрузка завершилась неудачей, но завершилась, поэтому статус меняем на false\r\n            // setError(e.message); // вернётся текст ошибки\r\n            setProcess('error') // процесс переходит в состояние ошибки (что загрузка не сработала)\r\n            throw e; // выкидываем ошибку\r\n        }\r\n\r\n    }, [])\r\n\r\n    // эта функция будет очищать ошибку, если она была\r\n    const clearError = useCallback(() => {\r\n        // больше не нужно благодаря состоянию process\r\n        // setError(null);\r\n        setProcess('loading'); // процесс вновь переходит в состояние загрузки\r\n    }, []);\r\n\r\n    // убираем loading и error, они больше не нужны благодаря process\r\n    return {request, clearError, process, setProcess};\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n// это код новый, с переделкой под хуки и функциональный подход\r\nconst useMarvelService = () => {\r\n    // через деструктуризацию вытащим интересующие нас части useHttp\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n    // т.к. запрос на сайт имеет одинаковые части, можно сократить url, введя переменные\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=677f4f151277ce2120c892cebbe0e1ba';\r\n    const _baseOffset = 200; // эта переменная означает отступ в количестве персонажей, начиная с первого, в запросе на сервер\r\n\r\n    // создадим несколько методов, которые будут упрощать работу\r\n    // метод по получению данных о всех персонажах\r\n    const getAllCharacters = async (offset = _baseOffset) => { // предусматриваем переменную и значение по умолчанию, потому что эта переменная может меняться\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    // метод по получению данных о конкретном персонаже\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`); // получили данные от сервера\r\n        return _transformCharacter(res.data.results[0]); // возвращаем их уже в преобразованном виде\r\n    }\r\n    // метод по трансформации данных о персонажах, он будет полученные данные от сервера превращать в объект, кт мы используем в компонентах (там этот объект является объектом state)\r\n    const _transformCharacter = (char) => {\r\n        let description = char.description;\r\n        description = description ? `${description.slice(0, 200)}...` : `Описание данного персонажа отсутствует`;\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: description,\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.slice(0, 10),\r\n            title: char.title,\r\n        }\r\n    }\r\n\r\n    // метод по трансформации данных о комиксах, он будет полученные данные от сервера превращать в объект, кт мы используем в компонентах (там этот объект является объектом state)\r\n    const _transformComics = (comics) => {\r\n        let price = comics.prices[0].price;\r\n        price = price ? `${comics.prices[0].price}$` : `Комикс отсутствует в продаже`;\r\n\r\n        return {\r\n            id: comics.id,\r\n            description: comics.description || 'Описание комикса отсутствует',\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            title: comics.title.length > 50\r\n                ? `${comics.title.slice(0, 50)}...`\r\n                : comics.title,\r\n            price: price,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            pageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"Информация о количестве листов в комиксе отсутствует\",\r\n        }\r\n    }\r\n\r\n    // метод по получению списка комиксов\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n    // метод по получению конкретного комикса\r\n    const getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    // метод по получению данных о конкретном персонаже\r\n    const getChar = async () => {\r\n        const res = await request(`${_apiBase}characters?${_apiKey}`); // получили данные от сервера\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // этот хук будет возвращать состояния загрузки и ошибки, а также два метода по получению всех персонажей и только одного персонажа\r\n    // благодаря process удаляем loading и error\r\n    return {\r\n            // loading, \r\n            // error, \r\n            clearError, \r\n            process,\r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComics, \r\n            getChar\r\n        }\r\n}\r\n\r\n// этот код старый, до переделки его в хуки\r\n// мы не импортируем Components и не наследуем от него, потому что это отдельный класс, в котором не будет ничего от React\r\n// class MarvelService {\r\n//     // т.к. запрос на сайт имеет одинаковые части, можно сократить url, введя переменные\r\n//     _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n//     _apiKey = 'apikey=677f4f151277ce2120c892cebbe0e1ba';\r\n//     _baseOffset = 200; // эта переменная означает отступ в количестве персонажей, начиная с первого, в запросе на сервер\r\n    \r\n//     // создали функцию (метод), которая будет делать запрос\r\n//     getResource = async (url) => {\r\n//         let res = await fetch(url);\r\n\r\n//         if (!res.ok) { // в случае ошибки будет выводиться сообщение об этом\r\n//             throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//         }\r\n\r\n//         return await res.json(); // если всё хорошо, будут возвращаться данные в формате json\r\n//     };\r\n\r\n//     // создадим несколько методов, которые будут упрощать работу с классом\r\n//     // метод по получению данных о всех персонажах\r\n//     getAllCharacters = async (offset = this._baseOffset) => { // предусматриваем переменную и значение по умолчанию, потому что эта переменная может меняться\r\n//         const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n//         return res.data.results.map(this._transformCharacter);\r\n//     }\r\n//     // метод по получению данных о конкретном персонаже\r\n//     getCharacter = async (id) => {\r\n//         const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`); // получили данные от сервера\r\n//         return this._transformCharacter(res.data.results[0]); // возвращаем их уже в преобразованном виде\r\n//     }\r\n//     // метод по трансформации данных, он будет полученные данные от сервера превращать в объект, кт мы используем в компонентах (там этот объект является объектом state)\r\n//     _transformCharacter = (char) => {\r\n//         let description = char.description;\r\n//         description = description ? `${description.slice(0, 200)}...` : `Описание данного персонажа отсутствует`;\r\n\r\n//         return {\r\n//             id: char.id,\r\n//             name: char.name,\r\n//             description: description,\r\n//             thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n//             homepage: char.urls[0].url,\r\n//             wiki: char.urls[1].url,\r\n//             comics: char.comics.items.slice(0, 10)\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinners';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\n// поскольку подобный блок логики повторяется в нескольких компонентах, мы его выделили в отдельную функцию в отдельном файле\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>; // если у состояния процесса значение ожидания, значит, ещё не был отправлен запрос на сервер и пока на сайте у компонента стоит заглушка\r\n        case 'loading':\r\n            return <Spinner/>; // если у состояния процесса значение загрузки, значит, запрос отправлен на сервер, но нет никакого ответа, поэтому будет показываться компонент загрузки\r\n        case 'confirmed':\r\n            return <Component data={data}/>; // если у состояния процесса значение подтверждено, значит, от сервера пришли данные, а не ошибка, тогда загружается полученный контент\r\n        case 'error':\r\n            return <ErrorMessage/>; // если у состония процесса значение ошибки, значит, от сервера не пришли данные, а возникла ошибка, тогда показывается компонент с ошибкой\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","imgError","alt","View","_ref","data","thumbnail","description","title","price","language","pageCount","_jsxs","className","children","Helmet","name","content","concat","Link","to","SingleComicPage","id","useParams","comic","setComic","useState","loading","error","getComics","clearError","process","setProcess","useMarvelService","useEffect","updateComics","then","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","char","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","prices","textObjects","getAllCharacters","offset","results","map","getCharacter","res","getAllComics","getChar","Skeleton","Component","Spinner"],"sourceRoot":""}